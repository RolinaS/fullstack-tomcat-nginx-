services:
  db:
    image: postgres:16-alpine
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${APP_PROFILE}
      SPRING_DATASOURCE_URL: ${APP_JDBC_URL}
      SPRING_DATASOURCE_USERNAME: ${APP_JDBC_USER}
      SPRING_DATASOURCE_PASSWORD: ${APP_JDBC_PASSWORD}
      SERVER_PORT: 8080
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: web
    restart: unless-stopped
    environment:
      PORT: 3000
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: "1"
      API_INTERNAL_BASE: http://api:8080/api
      NEXT_PUBLIC_API_BASE=: /api
    expose:
      - "3000"

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    depends_on:
      - web
      - api
    ports:
      - "${NGINX_HTTP_PORT}:80"
      # - "${NGINX_HTTPS_PORT}:443"  # Active plus tard avec TLS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  db_data:
